{-# OPTIONS --without-K --rewriting #-}

open import lib.Basics
open import lib.wild-cats.WildCat
open import lib.wild-cats.WildFunctor
open import lib.wild-cats.WildNatTr

module lib.wild-cats.EquivWC-props where

module _ {‚Ñìc‚ÇÅ ‚Ñìc‚ÇÇ ‚Ñìd‚ÇÅ ‚Ñìd‚ÇÇ : ULevel} {C : WildCat {‚Ñìc‚ÇÅ} {‚Ñìc‚ÇÇ}} {D : WildCat {‚Ñìd‚ÇÅ} {‚Ñìd‚ÇÇ}} where

  open Nat-trans
  open Equiv-wc
  open HAdjEquiv-wc

  -- Every equivalence of wild categories is a fully faithful functor.
  abstract
    Equiv-wc-ff : (e : Equiv-wc C D) ‚Üí {x y : ob C} ‚Üí is-equiv (arr (ftor‚ÇÅ e) {x} {y})
    Equiv-wc-ff (e@(EquivWC ftor‚ÇÅ ftor‚ÇÇ (iso‚ÇÅ-f , iso‚ÇÅ-s) (iso‚ÇÇ-f , iso‚ÇÇ-s))) {x} {y} = let aùîº@(AEquivWC hae zz) = Equiv-wc-promote e in 
      is-eq (arr ftor‚ÇÅ {x} {y})
        (Œª g ‚Üí ‚ü¶ C ‚üß <‚Äì-wc C (iso‚ÇÇ-s y) ‚ñ¢ ‚ü¶ C ‚üß arr ftor‚ÇÇ g ‚ñ¢ comp iso‚ÇÇ-f x)
        (Œª g ‚Üí
          arr ftor‚ÇÅ (‚ü¶ C ‚üß <‚Äì-wc C (iso‚ÇÇ-s y) ‚ñ¢ ‚ü¶ C ‚üß arr ftor‚ÇÇ g ‚ñ¢ comp iso‚ÇÇ-f x)
            =‚ü® comp-tri ftor‚ÇÅ (comp iso‚ÇÇ-f x) (arr ftor‚ÇÇ g) (<‚Äì-wc C (iso‚ÇÇ-s y)) ‚ü©
          ‚ü¶ D ‚üß arr ftor‚ÇÅ (<‚Äì-wc C (iso‚ÇÇ-s y)) ‚ñ¢ ‚ü¶ D ‚üß arr ftor‚ÇÅ (arr ftor‚ÇÇ g) ‚ñ¢ arr ftor‚ÇÅ (comp iso‚ÇÇ-f x)
            =‚ü® ap (Œª m ‚Üí ‚ü¶ D ‚üß m ‚ñ¢ ‚ü¶ D ‚üß arr ftor‚ÇÅ (arr ftor‚ÇÇ g) ‚ñ¢ arr ftor‚ÇÅ (comp iso‚ÇÇ-f x)) (zig-zag-eq aùîº y) ‚ü©
          ‚ü¶ D ‚üß comp (fst (iso‚ÇÅ hae)) (obj ftor‚ÇÅ y) ‚ñ¢
          (‚ü¶ D ‚üß arr ftor‚ÇÅ (arr ftor‚ÇÇ g) ‚ñ¢
          arr ftor‚ÇÅ (comp iso‚ÇÇ-f x))
            =‚ü® ! (Œ± D (comp (fst (iso‚ÇÅ hae)) (obj ftor‚ÇÅ y)) (arr ftor‚ÇÅ (arr ftor‚ÇÇ g)) (arr ftor‚ÇÅ (comp iso‚ÇÇ-f x))) ‚ü©
          ‚ü¶ D ‚üß (‚ü¶ D ‚üß comp (fst (iso‚ÇÅ hae)) (obj ftor‚ÇÅ y) ‚ñ¢ arr ftor‚ÇÅ (arr ftor‚ÇÇ g)) ‚ñ¢ arr ftor‚ÇÅ (comp iso‚ÇÇ-f x)
            =‚ü® ap (Œª m ‚Üí ‚ü¶ D ‚üß m ‚ñ¢ arr ftor‚ÇÅ (comp iso‚ÇÇ-f x)) (! (sq (fst (iso‚ÇÅ hae)) g)) ‚ü©
          ‚ü¶ D ‚üß (‚ü¶ D ‚üß g ‚ñ¢ comp (fst (iso‚ÇÅ hae)) (obj ftor‚ÇÅ x)) ‚ñ¢ arr ftor‚ÇÅ (comp iso‚ÇÇ-f x)
            =‚ü® Œ± D g (comp (fst (iso‚ÇÅ hae)) (obj ftor‚ÇÅ x)) (arr ftor‚ÇÅ (comp iso‚ÇÇ-f x)) ‚ü©
          ‚ü¶ D ‚üß g ‚ñ¢  ‚ü¶ D ‚üß comp (fst (iso‚ÇÅ hae)) (obj ftor‚ÇÅ x) ‚ñ¢ arr ftor‚ÇÅ (comp iso‚ÇÇ-f x)
            =‚ü® ap (Œª m ‚Üí ‚ü¶ D ‚üß g ‚ñ¢ m) (zig-zag aùîº x) ‚ü©
          ‚ü¶ D ‚üß g ‚ñ¢ id‚ÇÅ D (obj ftor‚ÇÅ x)
            =‚ü® ! (œÅ D g) ‚ü©
          g =‚àé)
        (Œª g ‚Üí 
          ‚ü¶ C ‚üß <‚Äì-wc C (iso‚ÇÇ-s y) ‚ñ¢ ‚ü¶ C ‚üß arr ftor‚ÇÇ (arr ftor‚ÇÅ g) ‚ñ¢ comp iso‚ÇÇ-f x
            =‚ü® ap (Œª m ‚Üí ‚ü¶ C ‚üß <‚Äì-wc C (iso‚ÇÇ-s y) ‚ñ¢ m) (sq iso‚ÇÇ-f g) ‚ü©
          ‚ü¶ C ‚üß <‚Äì-wc C (iso‚ÇÇ-s y) ‚ñ¢ ‚ü¶ C ‚üß comp iso‚ÇÇ-f y ‚ñ¢ g
            =‚ü® ! (Œ± C (<‚Äì-wc C (iso‚ÇÇ-s y)) (comp iso‚ÇÇ-f y) g) ‚ü©
          ‚ü¶ C ‚üß (‚ü¶ C ‚üß <‚Äì-wc C (iso‚ÇÇ-s y) ‚ñ¢  comp iso‚ÇÇ-f y) ‚ñ¢ g
            =‚ü® ap (Œª m ‚Üí ‚ü¶ C ‚üß m ‚ñ¢ g) (! (<‚Äì-wc-linv C (iso‚ÇÇ-s y))) ‚ü©
          ‚ü¶ C ‚üß id‚ÇÅ C y ‚ñ¢ g
            =‚ü® ! (lamb C g) ‚ü©
          g =‚àé)
